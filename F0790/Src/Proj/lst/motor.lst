C51 COMPILER V9.60.0.0   MOTOR                                                             04/10/2021 13:15:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\output\motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Src\motor.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Core;.
                    -.\Lib\Inc;..\User\Inc;..\App\Inc) DEBUG PRINT(.\lst\motor.lst) OBJECT(.\output\motor.obj)

line level    source

   1          #include "motor.h"
   2          
   3          u8 motor_strength;                              //震动强度   【pwm的占空比】
   4          bit motor_en;
   5          bit motor_state;        
   6          u8 motor_time_cnt;
   7          u8 motor_cycle;                                                         //一个循环 滴 的次数【为0表示一直间隔响，无限次】  【滴 滴，  滴 滴 滴，   滴 滴 滴
             - 滴】
   8          u8 motor_cycle_cnt;             
   9          
  10          bit motor_finish;       
  11          
  12          
  13          
  14          u8 shake_strength[] = {motor_strength_L,motor_strength_M,motor_strength_H};
  15          
  16          u8 alarm_shake_seted_strength = 0;                                      //设置的震动的强度  由3挡开关控制
  17          u8 alarm_shake_cycle = 2;                                                                               //一个循环里 滴 的次数
  18          /*********************************************************************************************************
             -************
  19          功      能：电机开启 转动
  20          参      数：
  21          返回值：
  22          **********************************************************************************************************
             -***********/
  23          void motor_enable(u8 _strength)         
  24          {
  25   1              GPIO_Init(MOTOR_AIN_PIN,MOTOR_A_FUNC_EN);               //motor A 引脚设置为PWM
  26   1              GPIO_Init(MOTOR_BIN_PIN,OUTPUT);                                                //motor B 引脚设置为 输出
  27   1              motor_b = 0;                                                                                                                            //motor B 输出 0
  28   1              
  29   1              INDEX = MOTOR_PWM_CH;
  30   1          
  31   1              
  32   1      //      PWMDIVH = 0;
  33   1      //      PWMDIVL = 255;                                                                                                                  //4M 14.4KHz    
  34   1              
  35   1      //      PWMDIVH = 0;
  36   1      //      PWMDIVL = 123;                                                                                                                  //4M 30KHz
  37   1              
  38   1      //      PWMDIVH = 0;
  39   1      //      PWMDIVL = 73;                                                                                                                           //4M 50KHz
  40   1              
  41   1      //      PWMDIVH = (u8)(442>>8);
  42   1      //      PWMDIVL = (u8)442;                                                                                                      //22.1184M 50KHz
  43   1      
  44   1              PWMDIVH = (u8)(221>>8);
  45   1              PWMDIVL = (u8)221;                                                                                                      //22.1184M 100KHz
  46   1              
  47   1              PWMDUTH = (u8)(_strength>>8);
  48   1              PWMDUTL = (u8)_strength;                                                                //设置PWM2 （motor A的PWM） 占空比：即电机的震动强度
  49   1              PWMUPD |= 1 << MOTOR_PWM_CH;                                                            //更新PWM6参数          
  50   1              while(PWMUPD);                                                                                                                  //等待更新完成
  51   1              PWMEN |= 1 << MOTOR_PWM_CH;                                                                     //开启PWM6 （motor A的PWM）             
C51 COMPILER V9.60.0.0   MOTOR                                                             04/10/2021 13:15:06 PAGE 2   

  52   1      }
  53          /*********************************************************************************************************
             -************
  54          功      能：电机 关闭
  55          参      数：
  56          返回值：
  57          **********************************************************************************************************
             -***********/
  58          void motor_disable(void)
  59          {
  60   1              PWMEN &= ~(1 << MOTOR_PWM_CH);                                  //关闭PWM6 （motor A）  
  61   1              GPIO_Init(MOTOR_AIN_PIN,        OUTPUT);                //motor A 引脚设置为 输出       
  62   1              GPIO_Init(MOTOR_BIN_PIN,        OUTPUT);                //motor B 引脚设置为 输出       
  63   1              motor_a = 1;
  64   1              motor_b = 1;                                                                                                    //两个引脚都输出高，，刹车
  65   1              Delay_50us(20);//延时1ms
  66   1          motor_a = 0;
  67   1              motor_b = 0;                                                                                                    //两个引脚都输出高，，刹车
  68   1              
  69   1      }
  70          
  71          
  72          void motor_init(void)
  73          {
  74   1          GPIO_Init(MOTOR_AIN_PIN,    OUTPUT);                //motor A 引脚设置为 输出       
  75   1          GPIO_Init(MOTOR_BIN_PIN,    OUTPUT);                //motor B 引脚设置为 输出       
  76   1      
  77   1          motor_a = 0;
  78   1          motor_b = 0;                                                                                                        //两个引脚都输出高，，刹车
  79   1      }
  80          
  81          /*********************************************************************************************************
             -************
  82          功      能：
  83          参      数：
  84          返回值：
  85          **********************************************************************************************************
             -***********/
  86          void motor_start(u8 _strength,u8 _cycle)
  87          {
  88   1              motor_state = 0;
  89   1              motor_finish = 0;       
  90   1              motor_strength = _strength;
  91   1      //      motor.shaketime = 20;                                   //
  92   1      //      motor.stoptime = 8;
  93   1              motor_time_cnt = 0;
  94   1              motor_cycle = _cycle;
  95   1              motor_cycle_cnt = 0;
  96   1              
  97   1              motor_en = 1;   
  98   1              motor_enable(_strength);
  99   1      }
 100          /*********************************************************************************************************
             -************
 101          功      能：
 102          参      数：
 103          返回值：
 104          **********************************************************************************************************
             -***********/
 105          void motor_stop(void)
 106          {
 107   1              motor_en = 0;
C51 COMPILER V9.60.0.0   MOTOR                                                             04/10/2021 13:15:06 PAGE 3   

 108   1              motor_disable();
 109   1      }
 110          /*********************************************************************************************************
             -************
 111          功      能：
 112          参      数：
 113          返回值：
 114          **********************************************************************************************************
             -***********/
 115          void motor_pro(void)
 116          {
 117   1              if(motor_en == 0)// || motor.stoptime == 0)
 118   1                      return;
 119   1              
 120   1              if(motor_state == 0)
 121   1              {
 122   2      //              if(motor.stoptime > 0)                  //震动有停止，即不是一直持续，而是有间隔的震动
 123   2                      {
 124   3                              if(++motor_time_cnt >= SHAKE_TIME/*motor.shaketime*/)
 125   3                              {
 126   4                                      motor_state = 1;
 127   4                                      motor_time_cnt = 0;
 128   4                                      motor_disable();                                
 129   4                              }
 130   3                      }               
 131   2              }
 132   1              else// if(motor_state == 1)
 133   1              {
 134   2                      if(++motor_time_cnt >= STOP_TIME/*motor.stoptime*/ )
 135   2                      {
 136   3                              if(motor_cycle > 0)                             //如果是震动多次（包括一次），即不是一直震动，而是有间隔的震动   嗡 嗡 嗡
 137   3                              {
 138   4                                      if(++motor_cycle_cnt >= motor_cycle)            //达到震动的次数，
 139   4                                      {                       
 140   5                                              motor_en = 0;
 141   5                                              motor_finish = 1;
 142   5                                              return ;                                                                                                                        //直接退出
 143   5                                      }
 144   4                              }                       
 145   3                              motor_state = 0;                                        //无限次震动  或  没达到震动的次数 ，
 146   3                              motor_time_cnt = 0;
 147   3                              motor_enable(motor_strength);                                                   //再次震动
 148   3                      }
 149   2              }
 150   1      }
 151          /*********************************************************************************************************
             -************
 152          功      能：
 153          参      数：
 154          返回值：
 155          **********************************************************************************************************
             -***********/
 156          void alarm_shake(void)
 157          {
 158   1              static u8 cycle_delay_time = 0;                         //两个循环之间的间隔时间 
 159   1              static u8 alarm_cycle_times = 0;                        //单个循环重复的次数    
 160   1              
 161   1              if(alarm_shake_step == 0)
 162   1              {
 163   2                      cycle_delay_time = 0;
 164   2                      alarm_cycle_times = 0;
 165   2                      motor_start(shake_strength[alarm_shake_seted_strength],alarm_shake_cycle);
C51 COMPILER V9.60.0.0   MOTOR                                                             04/10/2021 13:15:06 PAGE 4   

 166   2                      alarm_shake_step = 1;   
 167   2              }
 168   1              else
 169   1              {
 170   2                      if(motor_finish)                                                                                //完成了一次单个的循环
 171   2                      {
 172   3                              if(++ cycle_delay_time >= 50)                   //延时500ms
 173   3                              {                                       
 174   4                                      cycle_delay_time = 0;
 175   4                                      motor_finish = 0;
 176   4      
 177   4                                      if(++ alarm_cycle_times >= SHAKE_CYCLE_TIMES)           //每个循环 达到重复次数 后
 178   4                                      {
 179   5                                              alarm_cycle_times = 0;
 180   5                                              alarm_shake_cycle += 1;         
 181   5                                      }
 182   4                                      
 183   4                                      if(alarm_shake_cycle > 4)                                                                                               //超过 ‘ 嗡 嗡 嗡 嗡 ’ 后，                   
 184   4                                      {                                       
 185   5                                              motor_start(shake_strength[alarm_shake_seted_strength],0);              
 186   5                                      }
 187   4                                      else
 188   4                                      {
 189   5                                              motor_start(shake_strength[alarm_shake_seted_strength],alarm_shake_cycle);                              
 190   5                                      }
 191   4                              }                               
 192   3                      }       
 193   2              }
 194   1      }
 195          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
