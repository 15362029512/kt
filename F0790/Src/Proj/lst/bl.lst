C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BL
OBJECT MODULE PLACED IN .\output\bl.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Src\bl.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Core;..\L
                    -ib\Inc;..\User\Inc;..\App\Inc) DEBUG PRINT(.\lst\bl.lst) OBJECT(.\output\bl.obj)

line level    source

   1          /* Includes ------------------------------------------------------------------*/
   2          #include "bl.h"
   3          #include "uart.h"
   4          /* Private typedef -----------------------------------------------------------*/
   5          /* Private define ------------------------------------------------------------*/ 
   6          /* Private macro -------------------------------------------------------------*/
   7          
   8          
   9          
  10          
  11          
  12          
  13          
  14          
  15          
  16          /* Private functions ---------------------------------------------------------*/
  17          static void bl_printf(void);
  18          static void get_bl_PWM_duty_value(uint16_t * bl_PWM_duty);
  19          static void bl_param_init(void);
  20          static void set_bl_param(adjust_param_type * bl_param,uint16_t _max_bl_AD_value);
  21          static void bl_adjust_AD_init(void);
  22          
  23          
  24          
  25          /* Private variables ---------------------------------------------------------*/
  26          static uint16_t current_bl_AD_value = 0;   //µ±Ç°±³¹âÐýÅ¥µÄÖµ
  27          static uint16_t before_bl_AD_value = 0;    //ÉÏ´Î±³¹âÐýÅ¥µÄÖµ
  28          
  29          
  30          static uint16_t max_bl_AD_value = 3269;    //µ±Ç°±³¹âµ÷½ÚµÄ×î´óADÖµ
  31          static adjust_param_type bl_param = {0,0};
  32          
  33          
  34          
  35          /* global variables ----------------------------------------------------------*/
  36          uint16_t AD_value_buffer[AD_BUFF_LEN] = {0};
  37          uint16_t bl_PWM_duty = 0;         //±³¹âÕ¼¿Õ±È
  38          
  39          
  40          
  41          
  42          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  43          /***@º¯ÊýÃû³Æ£º   bl_handler
  44              @º¯Êý¹¦ÄÜ£º   ±³¹âµ÷½Ú´¦Àí
  45              @Èë¿Ú²ÎÊý£º   ÎÞ
  46              @³ö¿Ú²ÎÊý£º   ÎÞ
  47              @±¸×¢ËµÃ÷£º   ·ÀÖ¹×îÐ¡ÁÁ¶ÈÊ±ÉÁË¸£ºµ±ADÖµÐ¡ÓÚ5Ê±£¬Ö±½ÓÈÏÎª²¦µ½0ÁË£¬µ±×ö0´¦Àí£¬Èç¹û´óÓÚ5£¬°´ÍÆµ¼¹«Ê½Çó³ö
             -À´µÄÈç¹ûµÈÓÚ0£¬Ôò°´×îÐ¡ÁÁ¶È´¦Àí
  48          */
  49          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  50          void bl_handler(void)
  51          {
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 2   

  52   1          uint8_t set_bl_duty_flg = 0; //ÊÇ·ñÐèÒªÉèÖÃ±³¹âÕ¼¿Õ±È   
  53   1          uint16_t bl_AD_differ_value = 0;       //Ç°Ò»´ÎÓëÉÏÒ»´ÎADÖµµÄ²îÖµ
  54   1          #if (AD_FILTER == 0)
                      current_bl_AD_value = GetChannelAdcValue(BL_ADC_DETECT_ADCCH);  //Ö±½Ó»ñÈ¡ADÖµ
                  #elif (AD_FILTER == 1)
  57   1              current_bl_AD_value = get_adjust_AD_value(BL_ADC_DETECT_ADCCH); //»ñÈ¡ÂË²¨ºóµÄADÖµ
  58   1          #endif
  59   1          
  60   1          bl_AD_differ_value = get_dvalue_u16(current_bl_AD_value,before_bl_AD_value); //¶Ô±Èµ±Ç°ÖµºÍÉÏÒ»´ÎµÄÖµÇ
             -ó³ö²îÖµ
  61   1      
  62   1          if (current_bl_AD_value < 5)  //Èç¹ûADÖµÐ¡ÓÚ5Ö±½Ó¹Ø±Õ±³¹â
  63   1          {
  64   2              current_bl_AD_value = 0;
  65   2              if (!set_bl_duty_flg)
  66   2              {
  67   3                  bl_brightness_set(0);
  68   3                  set_bl_duty_flg = 1;
  69   3              }
  70   2              
  71   2          }
  72   1      
  73   1          if (bl_AD_differ_value >= 5) //Èç¹ûÇ°Ò»´ÎÓëºóÒ»´ÎµÄ²îÖµ´óÓÚ5£¬ÔòÈÏÎªÊÇÊÖ¶¯µ÷½Ú
  74   1          {
  75   2              set_bl_duty_flg = 0;
  76   2              if (current_bl_AD_value <= max_bl_AD_value) //Èç¹ûµ±Ç°ÖµÐ¡ÓÚµÈÓÚ×î´óADÖµ£¬ÔòÒÔÖ®Ç°µÄ¶ÔÓ¦¹ØÏµ¼ÆËãÁÁ
             -¶È
  77   2              {
  78   3                              //do noting
  79   3              }
  80   2              else
  81   2              {
  82   3                  if ((current_bl_AD_value - max_bl_AD_value) > 20) //Èç¹ûµ±Ç°Öµ´óÓÚ×î´óÖµ20¸öD
  83   3                  {
  84   4                                       if (current_bl_AD_value != 0xFFF)
  85   4                                       {
  86   5                                               max_bl_AD_value = current_bl_AD_value; //ÖØÐÂÉè¶¨×î´óÖµ
  87   5                                               set_bl_param(&bl_param,max_bl_AD_value); //ÒÔµ±Ç°µÄ×î´óÖµÉè¶¨kb²ÎÊý
  88   5                                       }
  89   4                  }
  90   3              }
  91   2              
  92   2              get_bl_PWM_duty_value(&bl_PWM_duty); //¸ù¾ÝkbÉè¶¨ÁÁ¶È
  93   2              bl_brightness_set(bl_PWM_duty);    //Éè¶¨ÁÁ¶Èµ½¼Ä´æÆ÷
  94   2              before_bl_AD_value = current_bl_AD_value;
  95   2              
  96   2          }
  97   1              //bl_printf();
  98   1      }
  99              
 100             
 101          
 102          
 103          
 104          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 105          /***@º¯ÊýÃû³Æ£º   bl_printf
 106              @º¯Êý¹¦ÄÜ£º   ÓÃÀ´´òÓ¡±³¹âÐÅÏ¢
 107              @Èë¿Ú²ÎÊý£º   ÎÞ
 108              @³ö¿Ú²ÎÊý£º   ÎÞ
 109              @±¸×¢ËµÃ÷£º   ÎÞ
 110          */
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 3   

 111          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 112          static void bl_printf(void)
 113          {
 114   1              #ifdef PRINT_ENABLE
 115   1          uart_printf("current_bl_AD_value = %d\n",current_bl_AD_value);
 116   1          uart_printf("bl_PWM_duty = %d\n",bl_PWM_duty);
 117   1              #endif
 118   1      }
 119          
 120          
 121          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 122          /***@º¯ÊýÃû³Æ£º   get_bl_PWM_duty_value
 123              @º¯Êý¹¦ÄÜ£º   »ñÈ¡±³¹âÕ¼¿Õ±ÈµÄÖµ
 124              @Èë¿Ú²ÎÊý£º   ÎÞ
 125              @³ö¿Ú²ÎÊý£º   bl_PWM_duty
 126              @±¸×¢ËµÃ÷£º   ¸ù¾ÝADÖµºÍ bl_param µÄ²ÎÊý¼ÆËãbl_PWM_duty,
 127          */
 128          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 129          static void get_bl_PWM_duty_value(uint16_t * bl_PWM_duty)
 130          {
 131   1      
 132   1          #if (PWM_DUTY_ADJUST_MODE == LINEAR_ADJUST)  
                      *bl_PWM_duty = (uint16_t)(bl_param.k * current_bl_AD_value + bl_param.b);
                      if (*bl_PWM_duty > BL_BRIGHTNESS_MAX)
                      {
                          *bl_PWM_duty = BL_BRIGHTNESS_MAX;
                      }
                  #elif (PWM_DUTY_ADJUST_MODE == CURVILINEAR_ADJUST)
 139   1              double temp_max_bl_AD_value = (double)current_bl_AD_value/100;
 140   1              double temp_max_bl_duty = 0;
 141   1              temp_max_bl_duty = (temp_max_bl_AD_value * temp_max_bl_AD_value * temp_max_bl_AD_value) * bl_param
             -.k;
 142   1              *bl_PWM_duty = (uint16_t)(temp_max_bl_duty * 100);
 143   1          #endif
 144   1          if (*bl_PWM_duty == 0)
 145   1          {
 146   2              *bl_PWM_duty = 1;
 147   2          }
 148   1      }
 149          
 150          
 151          
 152          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 153          /***@º¯ÊýÃû³Æ£º   bl_param_init
 154              @º¯Êý¹¦ÄÜ£º   ÒÔ×î´óadÖµ3269À´¼ÆËã£¬K,B
 155              @Èë¿Ú²ÎÊý£º   ÎÞ
 156              @³ö¿Ú²ÎÊý£º   ÎÞ
 157              @±¸×¢ËµÃ÷£º   ÎÞ
 158          */
 159          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 160          static void bl_param_init(void)
 161          {
 162   1          set_bl_param(&bl_param,max_bl_AD_value);
 163   1      }
 164          
 165          
 166          /*--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 4   

             -----------------------------------*/
 167          /***@º¯ÊýÃû³Æ£º   set_bl_param
 168              @º¯Êý¹¦ÄÜ£º   ¸ù¾Ýµ±Ç°±³¹âµ÷½ÚµÄ×î´óÖµ£¬ÖØÐÂËã³ö±³¹â²ÎÊý
 169              @Èë¿Ú²ÎÊý£º   ÎÞ
 170              @³ö¿Ú²ÎÊý£º   ÎÞ
 171              @±¸×¢ËµÃ÷£º   
 172          */
 173          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 174          static void set_bl_param(adjust_param_type * bl_param,uint16_t _max_bl_AD_value)
 175          {   
 176   1          #if (PWM_DUTY_ADJUST_MODE == LINEAR_ADJUST)    
                  
                      bl_param->k = (float)BL_BRIGHTNESS_MAX/(float)_max_bl_AD_value;
                      bl_param->b = 0;
                  
                  #elif (PWM_DUTY_ADJUST_MODE == CURVILINEAR_ADJUST)
 182   1      
 183   1              double temp_max_bl_AD_value = 0;
 184   1              double temp_max_bl_duty = 0;
 185   1              
 186   1              temp_max_bl_AD_value = (double)_max_bl_AD_value/100;
 187   1              temp_max_bl_duty = (double)(BL_BRIGHTNESS_MAX);
 188   1              temp_max_bl_duty = (temp_max_bl_duty/100);
 189   1              bl_param->k = temp_max_bl_duty/(temp_max_bl_AD_value * temp_max_bl_AD_value * temp_max_bl_AD_value
             -);
 190   1          #endif
 191   1      }
 192          
 193          
 194          
 195          
 196          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 197          /***@º¯ÊýÃû³Æ£º   bl_init
 198              @º¯Êý¹¦ÄÜ£º   bl_init(PWM4,100HZ)
 199              @Èë¿Ú²ÎÊý£º   ÎÞ
 200              @³ö¿Ú²ÎÊý£º   ÎÞ
 201              @±¸×¢ËµÃ÷£º   ÒªµãÁÁlcd±ØÐëÊ¹ÄÜ±³¹â£¬PWMÊ±ÖÓÔ´Ê¹ÓÃµÄÊÇIRCL£¬ÅäÖÃÇ°±ØÐëÊ¹ÄÜIRCL
 202          */
 203          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 204          void bl_init(void)
 205          {
 206   1              #if (BL_CTRL_MOD == BL_IO_CTRL)
                      GPIO_Init(BL_CTL_PIN,OUTPUT);
                      BL_CTL_GPIO = 1;
              
                  #elif (BL_CTRL_MOD == BL_PWM_CTRL)
 211   1              GPIO_Init(BL_CTL_PIN,BL_MOD);
 212   1      
 213   1              INDEX = BL_PWMCH;       
 214   1              PWMCON = 0x02;                                    //PWM4 Ê±ÖÓ:  IRCH = 131khz,PWM4 100HZ
 215   1              PWMDIVH = (uint8_t)(BL_PWM_DivDat >> 8);
 216   1              PWMDIVL = (uint8_t)BL_PWM_DivDat;
 217   1              PWMDUTL = 0;
 218   1              PWMDUTH = 0;
 219   1      
 220   1              PWMUPD |= (1 << BL_PWMCH);   //¸üÐÂ PWM4 ²ÎÊý   
 221   1              while(PWMUPD);              //µÈ´ý¸üÐÂÍê³É
 222   1              PWMEN |= (1 << BL_PWMCH);  //Ê¹ÄÜ PWM4
 223   1      
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 5   

 224   1              bl_adjust_AD_init();   //³õÊ¼»¯ÁÁ¶ÈAD²É¼¯
 225   1      
 226   1              current_bl_AD_value = get_adjust_AD_value(BL_ADC_DETECT_ADCCH); //»ñÈ¡ADÖµ
 227   1              before_bl_AD_value = current_bl_AD_value;
 228   1              if (current_bl_AD_value > max_bl_AD_value)
 229   1              {
 230   2                  if (current_bl_AD_value != 0xFFF)
 231   2                  {
 232   3                       max_bl_AD_value = current_bl_AD_value;
 233   3                  }
 234   2                 
 235   2              }
 236   1              bl_param_init(); //ÒÔ×î´óÖµÉè¶¨²ÎÊý
 237   1              get_bl_PWM_duty_value(&bl_PWM_duty); //¸ù¾Ý²ÎÊýÉè¶¨³õÊ¼»¯ÁÁ¶È
 238   1              //bl_brightness_set(bl_PWM_duty);    //LCDÓÉ DC ¹©µç,Éè¶¨ÁÁ¶Èµ½¼Ä´æÆ÷
 239   1          #endif
 240   1      
 241   1      }
 242          
 243          uint8_t bl_pwm_mode;
 244          
 245          
 246          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 247          /***@º¯ÊýÃû³Æ£º   bl_brightness_set
 248              @º¯Êý¹¦ÄÜ£º   ÉèÖÃ±³¹âÁÁ¶È
 249              @Èë¿Ú²ÎÊý£º   bl_duty:ÁÁ¶ÈÕ¼¿Õ±È
 250              @³ö¿Ú²ÎÊý£º   ÎÞ
 251              @±¸×¢ËµÃ÷£º   ·¶Î§0~1300
 252          */
 253          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 254          void bl_brightness_set(uint16_t bl_duty)
 255          {
 256   1          if (!bl_pwm_mode)
 257   1          {
 258   2              GPIO_Init(BL_CTL_PIN,BL_MOD);
 259   2              bl_pwm_mode = 1;
 260   2          }
 261   1          INDEX = BL_PWMCH;
 262   1          PWMDUTH = (uint8_t)(bl_duty >> 8);
 263   1          PWMDUTL = (uint8_t)bl_duty;
 264   1          
 265   1          PWMUPD |= (1 << BL_PWMCH);   //¸üÐÂ PWM4 ²ÎÊý       
 266   1          while(PWMUPD);              //µÈ´ý¸üÐÂÍê³É
 267   1          PWMEN |= (1 << BL_PWMCH);  //Ê¹ÄÜ PWM4
 268   1      }
 269          
 270          
 271          
 272          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 273          /***@º¯ÊýÃû³Æ£º   bl_adjust_AD_init
 274              @º¯Êý¹¦ÄÜ£º   ³õÊ¼»¯±³¹âµ÷½ÚÐýÅ¥,
 275              @Èë¿Ú²ÎÊý£º   ÎÞ
 276              @³ö¿Ú²ÎÊý£º   ÎÞ
 277              @±¸×¢ËµÃ÷£º   P44 ADC4 ³õÊ¼»¯Ç°±ØÐëÅäÖÃADC
 278          */
 279          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 280          static void bl_adjust_AD_init(void)
 281          {    
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 6   

 282   1          GPIO_Init(BL_ADC_DETECT_PIN, BL_ADC_DETECT_MOD);      //ch5,±³¹âµ÷½Ú¼ì²â
 283   1          ADCON = 0x3d;
 284   1          //ADCFGL |= 0X60;                           //ADCÊ±ÖÓ6·ÖÆµ 
 285   1          ADCFGL |= 0xc0;     
 286   1      }
 287          
 288          
 289          
 290          void bl_close(void)
 291          {
 292   1          GPIO_Init(BL_CTL_PIN,OUTPUT);
 293   1          BL_CTL = 0;
 294   1      
 295   1          GPIO_Init(BL_ADC_DETECT_PIN,HIGH_Z);
 296   1      }
 297          
 298          
 299          
 300          
 301          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 302          /***@º¯ÊýÃû³Æ£º   get_adjust_AD_value
 303              @º¯Êý¹¦ÄÜ£º   »ñÈ¡±³¹âµ÷½ÚÐýÅ¥Öµ
 304              @Èë¿Ú²ÎÊý£º   ADC_Channel_TypeDef ¶ÔÓ¦µÄADÍ¨µÀ
 305              @³ö¿Ú²ÎÊý£º   ÎÞ
 306              @±¸×¢ËµÃ÷£º   ÎÞ
 307          */
 308          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 309          uint16_t get_adjust_AD_value(ADC_Channel_TypeDef adc_chx)
 310          {
 311   1          uint8_t i = 0;
 312   1          uint32_t sum = 0;
 313   1          for (i = 0; i < AD_BUFF_LEN; i++)
 314   1          {
 315   2              AD_value_buffer[i] = GetChannelAdcValue(adc_chx);
 316   2              sum += AD_value_buffer[i];              
 317   2          }
 318   1          sum /= AD_BUFF_LEN;
 319   1          return (uint16_t)sum;
 320   1      }
 321          
 322          
 323          
 324          
 325          
 326          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 327          /***@º¯ÊýÃû³Æ£º   get_dvalue_u16
 328                  @º¯Êý¹¦ÄÜ£º   »ñÈ¡Á½¸öÊýµÄ²îÖµ
 329                  @Èë¿Ú²ÎÊý£º   ÎÞ  
 330                  @³ö¿Ú²ÎÊý£º   differ_value²îÖµ£¬Èç¹ûvalue1 > value2 ·µ»Ømax_flg = 1
 331                  @±¸×¢ËµÃ÷£º   ÎÞ
 332          */
 333          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 334          uint16_t get_dvalue_u16(uint16_t value1,uint16_t value2)
 335          {
 336   1          if (value1 > value2)
 337   1          {
 338   2              return (value1 - value2);
 339   2          }
C51 COMPILER V9.60.0.0   BL                                                                04/10/2021 13:15:05 PAGE 7   

 340   1          return (value2 - value1);
 341   1      }
 342          
 343          
 344          
 345          
 346          
 347          
 348          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 349          /***@º¯ÊýÃû³Æ£º   get_dvalue_u8
 350                  @º¯Êý¹¦ÄÜ£º   »ñÈ¡Á½¸öÊýµÄ²îÖµ
 351                  @Èë¿Ú²ÎÊý£º   ÎÞ  
 352                  @³ö¿Ú²ÎÊý£º   differ_value²îÖµ£¬Èç¹ûvalue1 > value2 ·µ»Ømax_flg = 1
 353                  @±¸×¢ËµÃ÷£º   ÎÞ
 354          */
 355          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 356          uint8_t get_dvalue_u8(uint8_t value1,uint8_t value2)
 357          {
 358   1          if (value1 > value2)
 359   1          {
 360   2              return (value1 - value2);
 361   2          }
 362   1          return (value2 - value1);
 363   1      }
 364          
 365          
 366          
 367          
 368          
 369          
 370          
 371          
 372          
 373          
 374          
 375          
 376          
 377          
 378          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1006    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =     37      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
