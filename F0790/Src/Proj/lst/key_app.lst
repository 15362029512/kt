C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEY_APP
OBJECT MODULE PLACED IN .\output\key_app.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\Src\key_app.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Core;
                    -..\Lib\Inc;..\User\Inc;..\App\Inc) DEBUG PRINT(.\lst\key_app.lst) OBJECT(.\output\key_app.obj)

line level    source

   1          #include "key_app.h"
   2          
   3          
   4          /* Private variables ---------------------------------------------------------*/
   5          static uint8_t  test_key2_cnt = 0;      
   6          
   7          /* global variables ----------------------------------------------------------*/
   8          uint8_t key_no_action_start = 0;
   9          uint8_t key_no_action_cnt = 0;
  10          
  11          uint8_t  test_step = 0;                                                         //测试时的步骤   0：显示软件版本后全屏    1：全屏后测试按键 和 喇叭电机
  12          uint8_t  test_key_num = 0;                                                      //测试按键时按键的值
  13          
  14          
  15          
  16          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  17          /***@函数名称：   key_process
  18              @函数功能：   每个按键的功能
  19              @出口参数：   无
  20              @备注说明：   无
  21          */
  22          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  23          void key_process(void)
  24          {
  25   1          if (lcd_mode != mode_9v_power_on_wait)
  26   1          {
  27   2              bsp_KeyScan10ms();
  28   2              ucKeyCode = bsp_GetKey();       /* 读取键值, 无键按下时返回 KEY_NONE = 0 */
  29   2              switch (ucKeyCode)
  30   2              {
  31   3                  case KEY_12_24H_SET_SHORT_UP:
  32   3                      key_12_24h_short_up_handler();
  33   3                      break;
  34   3                  case KEY_12_24H_SET_LONG_FIRST:
  35   3                      key_12_24h_long_press_handler();
  36   3                      break;
  37   3                               
  38   3                  case KEY_UP_SHORT_PRESS:
  39   3                  case KEY_UP_LONG_FIRST:
  40   3                  case KEY_UP_LONG_REPEAT:    
  41   3                      key_up_handler();
  42   3                      break;
  43   3      
  44   3                  case KEY_DOWN_SHORT_PRESS:
  45   3                  case KEY_DOWN_LONG_FIRST:
  46   3                  case KEY_DOWN_LONG_REPEAT:
  47   3                      key_down_handler();
  48   3                      break;
  49   3                  
  50   3                  case KEY_ALARM1_SHORT_UP:
  51   3                      key_al1_short_up_handler();
  52   3                      break;
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 2   

  53   3                  case KEY_ALARM1_LONG_FIRST:
  54   3                      key_al1_long_press_handler();
  55   3                      break;
  56   3                  
  57   3                  case KEY_ALARM2_SHORT_UP:
  58   3                      key_al2_short_up_handler();
  59   3                      break;
  60   3                  case KEY_ALARM2_LONG_FIRST:
  61   3                      key_al2_long_press_handler();
  62   3                      break;
  63   3      
  64   3                  case KEY_SNOOZE_SHORT_UP:
  65   3                      key_snooze_short_up_handler();
  66   3                      break;
  67   3                  case KEY_SNOOZE_LONG_FIRST:
  68   3                      key_snooze_long_handler();
  69   3                      break;
  70   3                  
  71   3                  case KEY_UP_DOWM_DOUBLE_LONG_FIRST:
  72   3                          key_up_down_double_handler();
  73   3                      break;
  74   3      
  75   3                  case KEY_ALARM_SET_SHORT_PRESS:             //短按取消闹铃和贪睡
  76   3                      key_alarm_set_short_press_handler();
  77   3                      break;   
  78   3                  case KEY_ALARM_SET_SHORT_UP:                //音量调节模式下返回主界面
  79   3                      key_alarm_set_short_up_handler();
  80   3                      break;
  81   3                  case KEY_ALARM_SET_LONG_FIRST:              //长按进入音量调节模式
  82   3                      key_alarm_set_long_press_handler();
  83   3                      break;
  84   3                  
  85   3                  default:break;
  86   3              }
  87   2          }
  88   1      }
  89          
  90          
  91          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  92          /***@函数名称：   key_no_action_test
  93              @函数功能：   按键无操作是对应的功能
  94              @出口参数：   无
  95              @备注说明：   无
  96          */
  97          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
  98          void key_no_action_test(void)
  99          {
 100   1              if(key_no_action_start)
 101   1              {
 102   2                      if(!key_no_action_cnt)                                                                                                                                                  //按键无动作时间到
 103   2                      {                       
 104   3                              key_no_action_start = 0;
 105   3                              #ifdef SHOW_ALARM_TIME_EN
                                      if(lcd_mode == mode_set_clock || lcd_mode == mode_set_snooze_time || lcd_mode == mode_show_alarm_time)
                                      #else
 108   3                              if(lcd_mode == mode_set_clock || lcd_mode == mode_set_snooze_time)
 109   3                              #endif
 110   3                              {
 111   4                                      lcd_mode = mode_clock;
 112   4                              }       
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 3   

 113   3                              else if(lcd_mode == mode_set_alarm)
 114   3                              {                               
 115   4                                      /**** 不保存设置的闹钟数据 *****/
 116   4                                      //rtc_alarm[flag_current_seting_alarm].a_ringtime = rtc_alarm[ALARM_TEMP].a_ringtime;
 117   4                                      rtc_alarm[flag_current_seting_alarm].a_day                      = rtc_alarm[ALARM_TEMP].a_day;
 118   4                                      rtc_alarm[flag_current_seting_alarm].a_hour             = rtc_alarm[ALARM_TEMP].a_hour;
 119   4                                      rtc_alarm[flag_current_seting_alarm].a_minute   = rtc_alarm[ALARM_TEMP].a_minute;
 120   4                                      rtc_alarm[flag_current_seting_alarm].a_second   = rtc_alarm[ALARM_TEMP].a_second;
 121   4                                      lcd_mode = mode_clock;
 122   4                              }
 123   3                              else if(lcd_mode == mode_test)
 124   3                              {
 125   4                                      test_step = 1;
 126   4                                      test_key2_cnt = 0;
 127   4                                      test_key_num = 0;
 128   4                                      lcd_show_all();
 129   4                              }
 130   3                      }
 131   2              }               
 132   1      }
 133          
 134          
 135          
 136          
 137          
 138          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 139          /***@函数名称：   test_time_set_step
 140              @函数功能：   设置时钟状态下，调整设置的location 年月日，时分
 141              @入口参数：   无
 142              @出口参数：   无
 143              @备注说明：   设置时钟模式下调用
 144          */
 145          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 146          static void test_time_set_step(void)
 147          {
 148   1              key_no_action_start = 0;
 149   1              lcd_clear();
 150   1              if(set_location == set_clock_day)                                                               //“日”设置完成后，又有一次按键
 151   1              {                                                                       //更新日历时间          
 152   2                      lcd_mode = mode_clock;                                                                                          //直接进入 时钟模式
 153   2                      return;
 154   2              }
 155   1              else 
 156   1              {               
 157   2                      set_location ++;                                                                                                                        //顺序切换到 设置其他           
 158   2              }                       
 159   1              
 160   1              key_no_action_cnt = SETING_FLASH_TIMER;
 161   1              key_no_action_start = 1;                                                                                                //按键无动作计时开始
 162   1      }
 163          
 164          
 165          
 166          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 167          /***@函数名称：   key_12_24h_short_up_handler
 168              @函数功能：   短按key_12_24h的功能
 169              @入口参数：   无
 170              @出口参数：   无
 171              @备注说明：   mode_clock模式下，切换12h24h，mode_set_clock调整设置的location
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 4   

 172          */
 173          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 174          static void key_12_24h_short_up_handler(void)
 175          {
 176   1          if (lcd_mode == mode_test)
 177   1          {
 178   2              if (test_step == 1)
 179   2              {
 180   3                      test_key2_cnt = 0;
 181   3                      lcd_clear();
 182   3                      test_key_num = 2;                                                               
 183   3              }
 184   2          }
 185   1          else if (lcd_mode == mode_clock)                                                                                            //如果在 时钟模式 
 186   1          {
 187   2              flag_24hours_en = !flag_24hours_en;                             //切换24h和12h制度
 188   2              alarm_stop_key_function(KEY_12_24H_SET_SHORT_PRESS);
 189   2          }
 190   1          else if (lcd_mode == mode_set_clock)                                                                //如果在 时钟设置模式
 191   1          {
 192   2              test_time_set_step();                                                   
 193   2          }
 194   1      }
 195          
 196          
 197          
 198          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 199          /***@函数名称：   key_12_24h_long_press_handler
 200              @函数功能：   长按key_12_24h的功能
 201              @入口参数：   无
 202              @出口参数：   无
 203              @备注说明：   mode_clock模式下，长按进入mode_set_clock
 204          */
 205          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 206          static void key_12_24h_long_press_handler(void)
 207          {
 208   1          if(lcd_mode == mode_clock)                                                                                          //在 时钟模式 下长按键
 209   1              {
 210   2                      lcd_clear();
 211   2                      lcd_mode = mode_set_clock;                                                                                      //转换到 时钟设置 模式
 212   2                      flag_set_flash_en = 1;                                                                                                  //设置位允许闪烁
 213   2                      set_location = set_clock_hour;                                                                  //先设置 时
 214   2                      key_no_action_cnt = SETING_FLASH_TIMER;
 215   2                      key_no_action_start = 1;                                                                                                //按键无动作计时开始                                                            
 216   2              }
 217   1      }
 218          
 219          
 220          
 221          
 222          
 223          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 224          /***@函数名称：   key_up_handler
 225              @函数功能：   key_up的功能
 226              @入口参数：   无
 227              @出口参数：   无
 228              @备注说明：   mode_clock模式下，长按进入mode_set_clock
 229          */
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 5   

 230          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 231          static void key_up_handler(void)
 232          {
 233   1          
 234   1              if(lcd_mode == mode_test)
 235   1              {
 236   2              if(test_step == 1)
 237   2              {
 238   3                  test_key2_cnt = 0;
 239   3                  lcd_clear();
 240   3                              test_key_num = 5;
 241   3              }
 242   2              }
 243   1              else if(lcd_mode == mode_clock)                                                                                         //如果在 时钟模式
 244   1              {
 245   2                      alarm_stop_key_function(KEY_UP_SHORT_PRESS);
 246   2              }
 247   1              else if(lcd_mode == mode_volum_adjust)
 248   1              {
 249   2              if (g_alarm_ring_index <= 3)
 250   2              {
 251   3                   g_alarm_ring_index++;
 252   3              }
 253   2              if (g_alarm_ring_index > 3)
 254   2              {
 255   3                  g_alarm_ring_index = 0;
 256   3              }
 257   2              }
 258   1         
 259   1      
 260   1              else    
 261   1              {
 262   2                      #ifdef SHOW_ALARM_TIME_EN
                              if(lcd_mode != mode_show_alarm_time)
                              #endif
 265   2                      {
 266   3                              key_no_action_start = 0;        
 267   3                              flag_set_flash_en = 0;                                                                                          //设置时，不允许闪烁            
 268   3                              set_no_flash_gap = SET_KEY_FLASH_GAP;                                   //不允许闪烁的时间间隔 600ms                                    
 269   3                              switch(lcd_mode)
 270   3                              {
 271   4                                      case mode_set_clock:            set_clock_add();break;
 272   4                                      case mode_set_alarm:            set_alarm_add();break;
 273   4                                      case mode_set_snooze_time:              
 274   4                                                                                                                                      if(++snooze_time > SNOOZE_TIME_MAX)
 275   4                                                                                                                                              snooze_time = SNOOZE_TIME_MIN;
 276   4                                                                                                                                      break;
 277   4                              }
 278   3                              
 279   3                              key_no_action_cnt = SETING_FLASH_TIMER;
 280   3                              key_no_action_start = 1;                                                                                        //按键无动作计时开始                                                                    
 281   3                      }                                                       
 282   2              }
 283   1      }
 284          
 285          
 286          
 287          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 288          /***@函数名称：   key_down_handler
 289              @函数功能：   key_dowm的功能
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 6   

 290              @入口参数：   无
 291              @出口参数：   无
 292              @备注说明：   mode_clock模式下，长按进入mode_set_clock
 293          */
 294          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 295          static void key_down_handler(void)
 296          {
 297   1              if(lcd_mode == mode_test)
 298   1              {
 299   2                      if(test_step == 1)
 300   2                      {
 301   3                              test_key2_cnt = 0;
 302   3                              lcd_clear();
 303   3                              test_key_num = 3;                                                               
 304   3                      }
 305   2              }
 306   1              else if(lcd_mode == mode_clock)                                                                                         //如果在 时钟模式
 307   1              {
 308   2                      alarm_stop_key_function(KEY_DOWN_SHORT_PRESS);
 309   2              }
 310   1      
 311   1          else if(lcd_mode == mode_volum_adjust)
 312   1              {
 313   2              if (g_alarm_ring_index > 0)
 314   2              {
 315   3                  g_alarm_ring_index--;
 316   3              }
 317   2              else
 318   2              {
 319   3                  g_alarm_ring_index = 3;
 320   3              }
 321   2              }
 322   1          
 323   1              else
 324   1              {
 325   2                      #ifdef SHOW_ALARM_TIME_EN
                              if(lcd_mode != mode_show_alarm_time)
                              #endif
 328   2                      {
 329   3                              key_no_action_start = 0;
 330   3                              flag_set_flash_en = 0;                                                                                          //设置时，不允许闪烁            
 331   3                              set_no_flash_gap = SET_KEY_FLASH_GAP;                                   //不允许闪烁的时间间隔 600ms                                    
 332   3                              switch(lcd_mode)
 333   3                              {
 334   4                                      case mode_set_clock:            set_clock_sub();break;
 335   4                                      case mode_set_alarm:            set_alarm_sub();break;
 336   4                                      case mode_set_snooze_time:              
 337   4                                                                                                                                      if(--snooze_time < SNOOZE_TIME_MIN)
 338   4                                                                                                                                              snooze_time = SNOOZE_TIME_MAX;
 339   4                                                                                                                                      break;                                                          
 340   4                              }                               
 341   3                              
 342   3                              key_no_action_cnt = SETING_FLASH_TIMER;
 343   3                              key_no_action_start = 1;                                                                                                        //按键无动作计时开始                                                            
 344   3                      }
 345   2              }
 346   1      }
 347          
 348          
 349          
 350          /*--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 7   

             -----------------------------------*/
 351          /***@函数名称：   test_alarm_set_step
 352              @函数功能：   设置闹钟模式下调整显示的location,并设置当前闹钟的参数
 353              @入口参数：   _set_alarm当前正在设置的闹钟
 354              @出口参数：   无
 355              @备注说明：   mode_clock模式下，长按进入mode_set_clock
 356          */
 357          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 358          static void test_alarm_set_step(uint8_t _set_alarm)
 359          {
 360   1              if(flag_current_seting_alarm == _set_alarm)
 361   1              {
 362   2                      key_no_action_start = 0;
 363   2                      lcd_clear();    
 364   2                      //if(set_location == set_alarm_ringtime)                                        //闹铃时长设置完成后，又有一次按键
 365   2                      if(set_location == set_alarm_day)                                       //闹铃时长设置完成后，又有一次按键
 366   2                      {
 367   3                              lcd_mode = mode_clock;
 368   3                              if(flag_current_seting_alarm == ALARM_1) 
 369   3                                      flag_alarm1_en = 1;
 370   3                              else 
 371   3                                      flag_alarm2_en = 1;
 372   3                      }                                                                                                                                               
 373   2                      else 
 374   2                      {
 375   3                              set_location ++;                                                                                                                        //切换到下个设置位
 376   3                      }                                                                                               
 377   2                      key_no_action_cnt = SETING_FLASH_TIMER; 
 378   2                      key_no_action_start = 1;                                                                                                //按键无动作计时开始    
 379   2              }
 380   1      }
 381          
 382          
 383          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 384          /***@函数名称：   enter_alarm_seting
 385              @函数功能：   进入闹钟设置模式
 386              @入口参数：   无
 387              @出口参数：   无
 388              @备注说明：   mode_clock模式下，长按进入mode_set_clock
 389          */
 390          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 391          static void enter_alarm_seting(uint8_t _set_alarm)
 392          {
 393   1              key_no_action_start = 0;
 394   1              /********* 保存原来闹钟的数据到中间变量 *********/
 395   1              flag_current_seting_alarm = _set_alarm;
 396   1              //rtc_alarm[ALARM_TEMP].a_ringtime      = rtc_alarm[flag_current_seting_alarm].a_ringtime;
 397   1              rtc_alarm[ALARM_TEMP].a_day                     = rtc_alarm[flag_current_seting_alarm].a_day;
 398   1              rtc_alarm[ALARM_TEMP].a_hour                    = rtc_alarm[flag_current_seting_alarm].a_hour;
 399   1              rtc_alarm[ALARM_TEMP].a_minute          = rtc_alarm[flag_current_seting_alarm].a_minute;
 400   1              rtc_alarm[ALARM_TEMP].a_second          = rtc_alarm[flag_current_seting_alarm].a_second;                
 401   1              /**************************************************/
 402   1              lcd_clear();    
 403   1              
 404   1              lcd_mode = mode_set_alarm;                                                                                      //转换模式到 设置闹钟模式
 405   1      //      lcd_symbol_deal(symbol_sec,SHOW);                               
 406   1              flag_set_flash_en = 1;                                                                                                  //设置为允许闪烁
 407   1              set_location = set_alarm_hour;                                                                  //先设置小时
 408   1              key_no_action_cnt = SETING_FLASH_TIMER;
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 8   

 409   1              key_no_action_start = 1;                                                                                                //按键无动作计时开始            
 410   1      }
 411          
 412          
 413          
 414          
 415          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 416          /***@函数名称：   alarm_stop_key_function
 417              @函数功能：   闹钟产生时，按下任意键停止闹钟，如果当前是贪睡模式，则关闭贪睡,闹钟未产生时按下KEY_ALARM
             -1 KEY_ALARM2关闭闹钟
 418              @入口参数：   _key:当前按下的是哪个键
 419              @出口参数：   无
 420              @备注说明：   无
 421          */
 422          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 423          static void alarm_stop_key_function(uint8_t _key)
 424          {
 425   1              if(flag_alarm_timeout)
 426   1              {
 427   2              flag_alarm_timeout = !flag_alarm_timeout;
 428   2          }
 429   1                      
 430   1              else if(flag_enter_snooze)
 431   1              {
 432   2              flag_enter_snooze = !flag_enter_snooze;
 433   2          }           
 434   1              else    
 435   1              {
 436   2                      switch(_key)
 437   2                      {               
 438   3                              case KEY_ALARM1_SHORT_PRESS:    
 439   3                                                              #ifdef SHOW_ALARM_TIME_EN       //---------显示闹钟时间
                                                                      if(!flag_alarm1_en)                                                                                                     // 闹钟没有开启
                                                                      {
                                                                              key_no_action_start = 0;
                                                                              flag_alarm1_en = 1;                                                                                             //则 开启闹钟
                                                                              lcd_mode = mode_show_alarm_time;                                        //转到 显示闹钟时间 模式
                                                                              flag_show_which_alarm = ALARM_1;                                        //同时设置要显示的是 闹钟1
                                                                              key_no_action_cnt = SHOW_ALARM_TIMER;   
                                                                              key_no_action_start = 1;                                                                        //按键无动作计时开始                                                                    
                                                                      }
                                                                      else                                                                                                                                                            //闹钟 已经开启
                                                                      {
                                                                              flag_alarm1_en = 0;                                                                                             //则 关闭闹钟
                                                                      }
                                                                      #else                                                                                   //---------只进行闹钟的开关
 454   3                                                              flag_alarm1_en = !flag_alarm1_en;                                               //切换闹钟1的开启状态
 455   3                                                              #endif
 456   3                                                              break;                          
 457   3                              case KEY_ALARM2_SHORT_PRESS:    
 458   3                                                              #ifdef SHOW_ALARM_TIME_EN                                       
                                                                      if(!flag_alarm2_en)
                                                                      {
                                                                              key_no_action_start = 0;
                                                                              flag_alarm2_en = 1;
                                                                              lcd_mode = mode_show_alarm_time;
                                                                              flag_show_which_alarm = ALARM_2;
                                                                              key_no_action_cnt = SHOW_ALARM_TIMER;   
                                                                              key_no_action_start = 1;                                        
                                                                      }
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 9   

                                                                      else
                                                                      {
                                                                              flag_alarm2_en = 0;
                                                                      }
                                                                      #else                                                                                                   
 473   3                                                              flag_alarm2_en = !flag_alarm2_en;
 474   3                                                              #endif
 475   3                                                              break;
 476   3                  default:break;                                      
 477   3                      }       
 478   2              }
 479   1      }
 480          
 481          
 482          
 483          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 484          /***@函数名称：   key_al1_short_up_handler
 485              @函数功能：   key_al1短按对应的功能
 486              @出口参数：   无
 487              @备注说明：   无
 488          */
 489          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 490          static void key_al1_short_up_handler(void)
 491          {
 492   1              if(lcd_mode == mode_test)
 493   1              {
 494   2                      if(test_step == 1)
 495   2                      {
 496   3                              test_key2_cnt = 0;
 497   3                              lcd_clear();
 498   3                              test_key_num = 7;                                                               
 499   3                      }
 500   2              }
 501   1              else if(lcd_mode == mode_clock)                                                                                         //如果在 时钟模式
 502   1              {
 503   2                      alarm_stop_key_function(KEY_ALARM1_SHORT_PRESS);
 504   2              }                                                       
 505   1              else if(lcd_mode == mode_set_alarm)                                                             //如果在 设置闹钟模式
 506   1              {
 507   2                      test_alarm_set_step(ALARM_1);
 508   2              }
 509   1      }
 510          
 511          
 512          
 513          
 514          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 515          /***@函数名称：   key_al1_long_press_handler
 516              @函数功能：   key_al1长按对应的功能
 517              @出口参数：   无
 518              @备注说明：   无
 519          */
 520          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 521          static void key_al1_long_press_handler(void)
 522          {
 523   1          enter_alarm_seting(ALARM_1);
 524   1      
 525   1      }
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 10  

 526          
 527          
 528          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 529          /***@函数名称：   key_al2_short_up_handler
 530              @函数功能：   key_al2短按对应的功能
 531              @出口参数：   无
 532              @备注说明：   无
 533          */
 534          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 535          static void key_al2_short_up_handler(void)
 536          {
 537   1              if(lcd_mode == mode_test)
 538   1              {
 539   2                      if(test_step == 1)
 540   2                      {
 541   3                              test_key2_cnt = 0;
 542   3                              lcd_clear();
 543   3                              test_key_num = 6;                                                               
 544   3                      }
 545   2              }
 546   1              else if(lcd_mode == mode_clock)                                                                                         //如果在 时钟模式
 547   1              {
 548   2                      alarm_stop_key_function(KEY_ALARM2_SHORT_PRESS);
 549   2              }
 550   1              else if(lcd_mode == mode_set_alarm)                                                             //如果在 设置闹钟模式
 551   1              {
 552   2                      test_alarm_set_step(ALARM_2);
 553   2              }
 554   1      }
 555          
 556          
 557          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 558          /***@函数名称：   key_al2_long_press_handler
 559              @函数功能：   key_al2长按对应的功能
 560              @出口参数：   无
 561              @备注说明：   无
 562          */
 563          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 564          static void key_al2_long_press_handler(void)
 565          {
 566   1          enter_alarm_seting(ALARM_2);
 567   1      }
 568          
 569          
 570          
 571          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 572          /***@函数名称：   key_snooze_short_up_handler
 573              @函数功能：   key_snooze短按对应的功能
 574              @出口参数：   无
 575              @备注说明：   无
 576          */
 577          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 578          static void key_snooze_short_up_handler(void)
 579          {
 580   1              if(lcd_mode == mode_test)
 581   1              {
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 11  

 582   2              switch (test_step)
 583   2              {
 584   3                  case 1:
 585   3                      lcd_clear();
 586   3                      test_key_num = 4;
 587   3                      test_key2_cnt++;
 588   3                      if(test_key2_cnt == 2)
 589   3                      {
 590   4                          test_key2_cnt = 0;
 591   4                          test_step = 2;
 592   4                          lcd_clear();
 593   4                      }       
 594   3                      break;
 595   3      
 596   3                  case 2:
 597   3                      test_step = 0;                  
 598   3                      motor_stop();
 599   3                      ring_stop();
 600   3                      lcd_mode = mode_clock;
 601   3                      break;
 602   3                      
 603   3                  default:break;    
 604   3                      
 605   3                  
 606   3                  
 607   3              }
 608   2              #if 0
                              if(test_step == 1)
                              {
                          lcd_clear();
                          test_key_num = 4;
                                      test_key2_cnt++;
                                      if(test_key2_cnt == 2)
                                      {
                              test_step = 2;
                              lcd_clear();
                          }                                                                                   
                              }
              
                      
                      else if (test_step == 2)
                      {
                          test_step = 0;                      
                                      motor_stop();
                                      ring_stop();
                          lcd_mode = mode_clock;
                          /*
                          if (g_cmd == cmd_ring_stop)
                          {
                              lcd_mode = mode_clock;
                          }
                          */
                      }
                      #endif
 636   2              }
 637   1              else if(lcd_mode == mode_clock)
 638   1              {
 639   2                      if(flag_alarm_timeout)
 640   2                      {
 641   3                              enter_snooze();                                                                                                                                 //进入贪睡
 642   3                      }                                                       
 643   2              }
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 12  

 644   1              else if(lcd_mode == mode_set_snooze_time)                               //设置贪睡时间时再按贪睡键
 645   1              {
 646   2                      lcd_mode = mode_clock;                                                                                          //返回时钟模式                                                  
 647   2              }
 648   1      }
 649          
 650          
 651          
 652          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 653          /***@函数名称：   key_snooze_long_handler
 654              @函数功能：   key_snooze长按对应的功能
 655              @出口参数：   无
 656              @备注说明：   无
 657          */
 658          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 659          static void key_snooze_long_handler(void)
 660          {
 661   1              if(lcd_mode == mode_clock)
 662   1              {
 663   2                      key_no_action_start = 0;
 664   2                      lcd_clear();
 665   2                      flag_set_flash_en = 1;                                                                                                  //设置位允许闪烁
 666   2                      lcd_mode = mode_set_snooze_time;                                                                //进入贪睡时长设置模式
 667   2                      key_no_action_cnt = SETING_FLASH_TIMER;
 668   2                      key_no_action_start = 1;                                                                                                //按键无动作计时开始                                                            
 669   2              }       
 670   1      }
 671          
 672          
 673          
 674          
 675          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 676          /***@函数名称：   key_alarm_set_short_up_handler
 677              @函数功能：   key_alarm_set短按对应的功能
 678              @出口参数：   无
 679              @备注说明：   无
 680          */
 681          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 682          static void key_alarm_set_short_up_handler(void)
 683          {
 684   1          alarm_stop_key_function(KEY_ALARM_SET_SHORT_UP); //短按取消闹铃和贪睡模式
 685   1          if(lcd_mode == mode_test)
 686   1              {
 687   2                      if(test_step == 1)
 688   2                      {
 689   3                              test_key2_cnt = 0;
 690   3                              lcd_clear();
 691   3                              test_key_num = 1;                                                               
 692   3                      }
 693   2              }
 694   1          else if (lcd_mode == mode_volum_adjust)
 695   1          {
 696   2              lcd_clear();
 697   2              lcd_mode = mode_clock;
 698   2          }
 699   1      }
 700          
 701          
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 13  

 702          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 703          /***@函数名称：   key_alarm_set_long_press_handler
 704              @函数功能：   key_alarm_set长按对应的功能
 705              @出口参数：   无
 706              @备注说明：   进入闹铃声音设置模式
 707          */
 708          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 709          static void key_alarm_set_long_press_handler(void)
 710          {
 711   1          alarm_stop_key_function(KEY_ALARM_SET_LONG_FIRST); //取消闹铃和贪睡模式
 712   1          if (lcd_mode == mode_clock)
 713   1          {
 714   2              lcd_clear();
 715   2              lcd_mode = mode_volum_adjust;          //进入音量调节模式
 716   2          }
 717   1      }
 718          
 719          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 720          /***@函数名称：   key_alarm_set_short_press_handler
 721              @函数功能：   key_alarm_set短按对应的功能
 722              @出口参数：   无
 723              @备注说明：   进入闹铃声音设置模式
 724          */
 725          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 726          static void key_alarm_set_short_press_handler(void)
 727          {
 728   1          alarm_stop_key_function(KEY_ALARM_SET_LONG_FIRST); //取消闹铃和贪睡模式
 729   1      }
 730          
 731          
 732          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 733          /***@函数名称：   key_up_down_double_handler
 734              @函数功能：   双按进入测试模式
 735              @出口参数：   无
 736              @备注说明：   无
 737          */
 738          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 739          
 740          static void key_up_down_double_handler(void)
 741          {
 742   1          if(lcd_mode != mode_test)
 743   1          {
 744   2              lcd_mode = mode_test;
 745   2              test_step = 0;
 746   2              lcd_clear();
 747   2              /*** 显示版本  4.0r***/
 748   2              lcd_num_deal(location_num_2,SHOW,num_1);
 749   2              lcd_symbol_deal(symbol_snooze,SHOW);
 750   2              lcd_num_deal(location_num_3,SHOW,num_0);
 751   2              lcd_num_deal(location_num_4,SHOW,num_r);                                
 752   2              key_no_action_cnt = KEY_NO_ACTION_2s;
 753   2              key_no_action_start = 1;                                                                                                //按键无动作计时开始                                                    
 754   2          }
 755   1      
 756   1      }
 757          
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 14  

 758          
 759          
 760          
 761          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 762          /***@函数名称：   key_add设置时钟
 763              @函数功能：   每个按键的功能
 764              @出口参数：   无
 765              @备注说明：   无
 766          */
 767          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 768          static void set_clock_add(void)
 769          {
 770   1              if(set_location == set_clock_hour)
 771   1              {
 772   2                      if(++calendar.st_hour == 24)    calendar.st_hour = 0;
 773   2              }                                       
 774   1              else if(set_location == set_clock_minute)
 775   1              {
 776   2                      if(++calendar.st_minute == 60)  calendar.st_minute = 0;
 777   2              }
 778   1              else if(set_location == set_clock_12_24)
 779   1              {
 780   2                      flag_24hours_en = !flag_24hours_en;                                     //切换小时的格式        
 781   2              }       
 782   1              else if(set_location == set_clock_year)
 783   1              {
 784   2                      if(++calendar.st_year == 2100)  calendar.st_year = 2099;
 785   2              }
 786   1              else if(set_location == set_clock_month)
 787   1              {
 788   2                      /* 先判断 当前的天数 是否 超过了下一个要设置月的 最大天数值， 超过则 提前设置好最大天数值*/
 789   2                      if(is_over_max_days(calendar.st_year,((calendar.st_month + 1 == 13) ? 1 : (calendar.st_month + 1)),calen
             -dar.st_day))
 790   2                      {
 791   3                              set_max_days_of_month(calendar.st_year,((calendar.st_month + 1 == 13) ? 1 : (calendar.st_month + 1)));
 792   3                      }               
 793   2                      if(++calendar.st_month == 13)   calendar.st_month = 1;                                  
 794   2              }
 795   1              else if(set_location == set_clock_day)
 796   1              {
 797   2                      calendar.st_day++;
 798   2                      /*** 超过月份的最大天数 ***/
 799   2                      if( ((calendar.st_month != 2) && (calendar.st_day > day_of_month[calendar.st_month - 1])) ||
 800   2                                      ((calendar.st_month == 2) && (calendar.st_day == 29 + (u8)is_leap_year(calendar.st_year))) )
 801   2                      {
 802   3                              calendar.st_day = 1;
 803   3      //                      if(++calendar.st_month == 13)   calendar.st_month = 1;  
 804   3                      }                                                       
 805   2              }
 806   1              calendar.st_second = 0;                                                 //每次改 秒 归零        
 807   1              updata_calendar();
 808   1      }
 809          
 810          
 811          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 812          /***@函数名称：   key_down设置时钟
 813              @函数功能：   每个按键的功能
 814              @出口参数：   无
 815              @备注说明：   无
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 15  

 816          */
 817          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 818          static void set_clock_sub(void)
 819          {
 820   1              if(set_location == set_clock_hour)
 821   1              {
 822   2                      if(--calendar.st_hour == 255)   calendar.st_hour = 23;
 823   2              }                                       
 824   1              else if(set_location == set_clock_minute)
 825   1              {
 826   2                      if(--calendar.st_minute == 255) calendar.st_minute = 59;                
 827   2              }       
 828   1              else if(set_location == set_clock_12_24)
 829   1              {
 830   2                      flag_24hours_en = !flag_24hours_en;                                     //切换小时的格式                        
 831   2              }       
 832   1              else if(set_location == set_clock_year)
 833   1              {
 834   2                      if(--calendar.st_year == 1969)  calendar.st_year = 1970;
 835   2              }
 836   1              else if(set_location == set_clock_month)
 837   1              {
 838   2                      if(is_over_max_days(calendar.st_year,((calendar.st_month - 1 == 0) ? 12 : (calendar.st_month - 1)),calen
             -dar.st_day))
 839   2                      {
 840   3                              set_max_days_of_month(calendar.st_year,((calendar.st_month - 1 == 0) ? 12 : (calendar.st_month - 1)));
 841   3                      }                       
 842   2                      if(--calendar.st_month == 0)    calendar.st_month = 12;                                 
 843   2              }
 844   1              else if(set_location == set_clock_day)
 845   1              {
 846   2                      if(--calendar.st_day == 0)
 847   2                      {
 848   3      //                      if(--calendar.st_month == 0) calendar.st_month = 12;            
 849   3                              if(calendar.st_month != 2)
 850   3                              {
 851   4                                      calendar.st_day = day_of_month[calendar.st_month - 1];
 852   4                              }
 853   3                              else
 854   3                              {
 855   4                                      calendar.st_day = 28 + (u8)is_leap_year(calendar.st_year);
 856   4                              }               
 857   3                      }                               
 858   2              }
 859   1              calendar.st_second = 0;                                                 //每次改变 秒 归零
 860   1              updata_calendar();      
 861   1      }
 862          
 863          
 864          
 865          
 866          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 867          /***@函数名称：   key_up设置闹钟
 868              @函数功能：   无
 869              @出口参数：   无
 870              @备注说明：   无
 871          */
 872          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 873          static void set_alarm_add(void)
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 16  

 874          {
 875   1              if(set_location == set_alarm_hour)
 876   1              {
 877   2                      if(++rtc_alarm[flag_current_seting_alarm].a_hour == 24)
 878   2                              rtc_alarm[flag_current_seting_alarm].a_hour = 0;
 879   2              }                                       
 880   1              else if(set_location == set_alarm_minute)
 881   1              {
 882   2                      if(++rtc_alarm[flag_current_seting_alarm].a_minute == 60)
 883   2                              rtc_alarm[flag_current_seting_alarm].a_minute = 0;
 884   2              }
 885   1              else if(set_location == set_alarm_day)
 886   1              {
 887   2                      if(++rtc_alarm[flag_current_seting_alarm].a_day == 4)
 888   2                              rtc_alarm[flag_current_seting_alarm].a_day = 0;                 
 889   2              }       
 890   1      }
 891          
 892          
 893          
 894          
 895          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 896          /***@函数名称：   key_down设置闹钟
 897              @函数功能：   无
 898              @出口参数：   无
 899              @备注说明：   无
 900          */
 901          /*--------------------------------------------------------------------------------------------------------
             -----------------------------------*/
 902          static void set_alarm_sub(void)
 903          {
 904   1              if(set_location == set_alarm_hour)
 905   1              {
 906   2                      if(--rtc_alarm[flag_current_seting_alarm].a_hour == 255)
 907   2                              rtc_alarm[flag_current_seting_alarm].a_hour = 23;
 908   2              }                                       
 909   1              else if(set_location == set_alarm_minute)
 910   1              {
 911   2                      if(--rtc_alarm[flag_current_seting_alarm].a_minute == 255)
 912   2                              rtc_alarm[flag_current_seting_alarm].a_minute = 59;
 913   2              }
 914   1              else if(set_location == set_alarm_day)
 915   1              {
 916   2                      if(--rtc_alarm[flag_current_seting_alarm].a_day == 255)
 917   2                              rtc_alarm[flag_current_seting_alarm].a_day = 3; 
 918   2              }       
 919   1      }
 920          
 921          
 922          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2272    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   KEY_APP                                                           04/10/2021 13:15:00 PAGE 17  

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
